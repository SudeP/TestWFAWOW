r1:
Get(
key:"a2/frame1"
)
Add(
key:"a2/frame1"
entry:{System.Web.Caching.CachedVary}
utcExpiry:{31.12.9999 23:59:59}
)
Set(
key:"a2/frame1HQFCDE"
entry:{System.Web.Caching.OutputCacheEntry}
utcExpiry:{19.03.2021 17:50:29}
)
r2:
Get(
key:"a2/frame1"
)
Get(
key:"a2/frame1HQFCDE"
)
r3:
Get(
key:"a2/frame1"
)
Get(
key:"a2/frame1HQFCDE"
)



r1:
Get(
key:"a2/frame2"
)
Add(
key:"a2/frame2"
entry:{System.Web.Caching.CachedVary}
utcExpiry:{31.12.9999 23:59:59}
)
Set(
key:"a2/frame2HQFCDE"
entry:{System.Web.Caching.OutputCacheEntry}
utcExpiry:{19.03.2021 18:27:20}
)
r2:
Get(
key:"a2/frame2"
)
Get(
key:"a2/frame2HQFCDE"
)
r3:
Get(
key:"a2/frame2"
)
Get(
key:"a2/frame2HQFCDE"
)















                    //HttpContext bind = ReflectionUtility.Bind(httpContext, ProviderUtility.CloneContext(httpContext), "Request", "_request", "Response", "_response");
                    //HttpContext empty = ProviderUtility.CloneContext(httpContext);

                    //object from = httpContext.Response;
                    //object to = empty.Response;

                    //Type fromType = from.GetType();

                    //Type toType = to.GetType();

                    //string[] ignores = new string[] {
                    //    "_wr",
                    //    "_httpWriter",
                    //};

                    //PropertyInfo[] toProperties = toType.GetProperties(Statics.bf)
                    //    .OrderBy(x => x.Name)
                    //    .ToArray();
                    ////37
                    ////int cp = 37;
                    //int cp = toProperties.Length;
                    //for (int i = 0; i < cp; i++)
                    //{
                    //    PropertyInfo toProperty = toProperties[i];

                    //    PropertyInfo requestSettingsProperty = fromType.GetProperty(toProperty.Name);
                    //    if (requestSettingsProperty != null && requestSettingsProperty.PropertyType == toProperty.PropertyType
                    //       && !ignores.Contains(toProperty.Name))
                    //        try
                    //        {
                    //            toProperty.SetValue(to, requestSettingsProperty.GetValue(from));
                    //        }
                    //        catch (Exception ex)
                    //        {
                    //        }
                    //}
                    ////_headers
                    ////_headersWritten
                    ////_httpWriter
                    //FieldInfo[] toFields = toType.GetFields(Statics.bf)
                    //    .OrderBy(x => x.Name)
                    //    .ToArray();

                    ////var asd = toFields.Skip(30).Take(20);

                    ////67
                    ////int cf = 36;
                    //int cf = toFields.Length;
                    //for (int i = 0; i < cf; i++)
                    //{
                    //    FieldInfo toField = toFields[i];
                    //    FieldInfo requestSettingsField = fromType.GetField(toField.Name, Statics.bf);
                    //    if (requestSettingsField != null && requestSettingsField.FieldType == toField.FieldType
                    //       && !ignores.Contains(toField.Name))
                    //        try
                    //        {
                    //            toField.SetValue(to, requestSettingsField.GetValue(from));
                    //        }
                    //        catch (Exception ex)
                    //        {
                    //        }
                    //}

                    //bind.GetType().GetField("_response", Statics.bf).SetValue(bind, to);